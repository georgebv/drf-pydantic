[project]
name = "drf-pydantic"
dynamic = ["version"]
description = "Use pydantic with the Django REST framework"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
license-files = ["LICENSE"]
authors = [{ name = "George Bocharov", email = "bocharovgeorgii@gmail.com" }]
keywords = ["django", "drf", "pydantic", "typing", "rest", "api"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
urls = { "homepage" = "https://github.com/georgebv/drf-pydantic", "github" = "https://github.com/georgebv/drf-pydantic" }
dependencies = ["djangorestframework>=3.13.0", "pydantic[email]>=2.0.0"]

[dependency-groups]
dev = ["pre-commit>=4.2.0"]
lint = ["mypy>=1.15.0", "ruff>=0.11.2"]
test = ["pytest>=8.3.5", "pytest-cov>=6.0.0"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = ["README.md", "LICENSE", "src/**/*.py", "src/*/py.typed"]

[tool.hatch.version]
path = "src/drf_pydantic/__init__.py"

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

[tool.ruff]
# https://docs.astral.sh/ruff/rules
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E",
    # pep8-naming
    "N",
    # flake8-bandit
    "S",
    # flake8-comprehensions
    "C4",
    # flake8-logging-format
    "G",
    # flake8-print
    "T20",
    # flake8-use-pathlib
    "PTH",
    # Pylint
    "PL",
    # Ruff-specific rules
    "RUF",
]
ignore = [
    # Bandit: assert statement
    "S101",
    # `subprocess` call: check for execution of untrusted input
    "S603",
    "S607",
    # `open()` should be replaced by `Path.open()`
    "PTH123",
    # Magic value used in comparison
    "PLR2004",
    # Too many branches
    "PLR0912",
    # Too many arguments
    "PLR0913",
    # Too many statements
    "PLR0915",
    # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF012",
    # line too long
    "E501",
]

[tool.ruff.lint.isort]
lines-between-types = 1

[tool.pytest.ini_options]
addopts = "-v --cov=drf_pydantic --cov-report=term --cov-report=xml --cov-report=html"
testpaths = ["tests"]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'raise AssertionError',
    'raise NotImplementedError',
    'if __name__ == .__main__.:',
    'def __repr__',
    "if (typing.)?TYPE_CHECKING:",
]
fail_under = 90
precision = 1
skip_empty = true
sort = "-Cover"
